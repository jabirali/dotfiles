#+title: Emacs configuration
#+author: Jabir Ali Ouassou
#+property: header-args :tangle init.el

* Introduction
This is my GNU Emacs configuration.  It is written as an Org notebook: The text below is documentation with embedded Emacs Lisp code blocks.  These code blocks are then autoexported to "real" config files when the notebook is edited and saved from within Emacs.

* Bootstrap
** Installation
I primarily use this configuration on macOS.  To install an appropriate Emacs version via Homebrew, run the following commands:

#+begin_src bash :tangle no
  brew tap d12frosted/emacs-plus
  brew install emacs-plus@29 --with-native-comp --with-nobu417-big-sur-icon
#+end_src

** Modifier keys
What is not visible in this README.org itself, is that I use Karabiner Elements to remap the modifier keys on the operating system level.  Within Emacs, I then use Command as Meta, Option as Ctrl, and Caps Lock as Option.

** Package repos
Many useful packages are not available in the default repositories used by the Emacs package manager.  Let's throw third-party repos in there.

#+begin_src emacs-lisp
  (setq package-archives 
	'(("gnu" . "https://elpa.gnu.org/packages/")
	  ("nongnu" . "https://elpa.nongnu.org/nongnu/")
	  ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+end_src

** Early init
Emacs has a separate configuration file =early-init.el= for settings that should be set before the GUI is initialized.  In my case, I want to add some horizontal margins between the fringe indicators and code.

#+begin_src emacs-lisp :tangle early-init.el
  (setq-default
   left-margin-width 1
   right-margin-width 1
   fringes-outside-margins t)
#+end_src

* Core configuration
** Better defaults
Emacs tends to be a bit too verbose by default...  Let's fix that.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq native-comp-async-report-warnings-errors nil)
  (setq ring-bell-function 'ignore)
#+end_src

I also don't like how it litters my file system with autosave and backup files (i.e. =#file#= and =file~=).  Let's clean it up a bit.

#+begin_src emacs-lisp
  (setq auto-save-default nil)
  (setq backup-directory-alist `(("." . "~/.cache/emacs/backup/")))
  (setq backup-by-copying t)
#+end_src

I also don't like that it defaults to writing =M-x customize= variables into the =init.el= file itself (including e.g. package management info).  I'd rather it throw that state into a separate file.

#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

The default aesthetics is very outdated.  Let's give it a more minimalist look, enable better mouse support, and enable a modern-looking cursor.  (The default cursor has its charm, but doesn't fit well in e.g. LaTeX modes due to e.g. subscript characters having very different sizes.)  I do this before any =use-package= invocations, so that these defaults work even if my Emacs is (temporarily) struggling to install the desired packages.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (delete-selection-mode 1)
  (context-menu-mode 1)
  (xterm-mouse-mode 1)
  ; (pixel-scroll-precision-mode 1)

  (blink-cursor-mode -1)
  (setq-default cursor-type 'bar)

  (setq frame-inhibit-implied-resize t)
  (setq frame-resize-pixelwise t)
#+end_src

Let's improve the default frame parameters, e.g. choosing a nicer font.
#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono NL-13" nil t)
  (use-package nerd-icons :ensure t)
#+end_src

** Keybindings
Here, we only include keybindings which don't "belong" to any particular package.  Package-specific keybindings are handled in the pertinent =use-package= blocks throughout the rest of the config file.

Next, remap unergonomic default keys like =C-x o= to more sensible bindings.  Note that some of these keybindings might be overridden by =use-package= statements below, if I enable packages that provide the same functionality in a better way than the default bindings.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-`") 'switch-to-buffer)
  (global-set-key (kbd "C-.") 'repeat)
#+end_src

* Extra enhancements
** Evil mode
Don't turn this off. Every time I do, after some weeks to months, I start to experience pains in my lower left forearm due to overly heavy use of modifier keys (despite remapping the modifiers).

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :defer .1
    :init
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    :custom
    evil-disable-insert-state-bindings t
    :config
    (evil-mode))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode))
#+end_src

** Multiple cursors
This is the simplest possible version of multiple cursors for Emacs, but it is very easy to use: Just press =C-;= to start refactoring. To limit the edits to a region, highlight an area and press =C-;= again.

#+begin_src emacs-lisp
  (use-package iedit
    :ensure t)
#+end_src


** Fuzzy finder
I'm currently using Ivy as my fuzzy searcher.  It provides a nicer interface to e.g. managing files and buffers than the built-in modes in Emacs (e.g. Ido-mode and its descendants), feels more ergonomic and less bloated than Helm, and is easier to setup than Vertico and all its relatives.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode)
    :bind
    (("C-x C-r" . ivy-resume)))

  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-b" . counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     ("C-x C-g" . counsel-git)
     ("C-S-s"   . counsel-git-grep)
     :map help-map
     ("f" . counsel-describe-function)
     ("v" . counsel-describe-variable)
     :map minibuffer-local-map
     ("C-r" . counsel-minibuffer-history)))

  ;; (use-package swiper
  ;;   :ensure t
  ;;   :config
  ;;   (setq swiper-action-recenter t)
  ;;   :bind
  ;;   (("C-s" . 'swiper)))

  (use-package ace-window
    :ensure t
    :bind
    (("M-o" . ace-window)))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (setq yas-snippet-dir "~/.config/emacs/snippets")
    (yas-global-mode 1))
#+end_src

** Language servers
LSP was a good idea, and an LSP client is now bundled with Emacs itself.  Let's use it.

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (setq eldoc-echo-area-use-multiline-p nil)
    (setq eldoc-echo-area-prefer-doc-buffer t))
    ;:hook
    ;((python-ts-mode . eglot-ensure)))
#+end_src

** Discoverability
Give some interactive help when I don't remember the exact keybinding for something.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1))
#+end_src

** Aesthetics
Doom Emacs has produced a very nice collection of themes, as well as a modeline configuration that is nicer than the Emacs default.

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-gruvbox-light))

  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode))
#+end_src

* Language support
*** Org-mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-pretty-entities t)
    (setq org-startup-indented t))

    ;(setq org-pretty-entities-include-sub-superscripts nil)
    ;; :hook
    ;; ((org-mode . org-cdlatex-mode)
    ;;  (org-mode . visual-line-mode)))

  (use-package org-babel
    :no-require
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))
    (add-to-list 'org-babel-default-header-args '(:wrap . "results"))
    (setq org-babel-default-header-args:python '((:python . "python3") (:results . "output")))
    (setq org-confirm-babel-evaluate nil)
    (setq org-babel-results-keyword "results")
    (add-to-list 'org-latex-packages-alist '("" "eulervm" t)))
#+end_src

** Python
** LaTeX
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    :hook
    ((LaTeX-mode . cdlatex-mode)
     (LaTeX-mode . prettify-symbols-mode)))

  (use-package xenops
    :ensure xenops
    :config
    (setq xenops-math-image-scale-factor 1.4)
    ; (setq xenops-reveal-on-entry t)
    :hook
    ((org-mode . xenops-mode)
     (latex-mode . xenops-mode)
     (LaTeX-mode . xenops-mode)))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src

* Personal scripts
** Goto definition
By default, =M-.= jumps to the definition of a symbol (via LSP if you use Eglot), but it's not easy to actually read the code without manually pressing =C-l-= a couple of times.  This fixes that issue.  (Could probably be rewritten in a cleaner way as an advice to the relevant =xref= function.)
#+begin_src emacs-lisp
  (defun my/goto-def ()
    (interactive)
    (call-interactively 'xref-find-definitions)
    (recenter-top-bottom 0))

  (global-set-key (kbd "M-.") 'my/goto-def)
#+end_src

** History navigation
Many commands set the mark automatically when you jump around in a file; for instance, =C-s= / =C-r= / =M-<= / =M->= all do this.  You can also set the mark manually using =C-SPC C-SPC=.  It can therefore be useful to have some keybindings to more easily navigate these marks.  The default =C-u C-SPC= only goes one direction through the mark ring, and moreover is not so convenient to type cf. e.g. Sublime's =C--= and Vim's =C-o=.  The bindings I chose here are similar to the history navigation in a web browser.

#+begin_src emacs-lisp
  (defun my/mark-ring-backward ()
    "Retreat through the mark ring."
    (interactive)
    (pop-to-mark-command))

  (defun my/mark-ring-forward ()
    "Advance through the mark ring."
    (interactive)
    (when mark-ring
      (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
      (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
      (when (null (mark t)) (ding))
      (setq mark-ring (nbutlast mark-ring))
      (goto-char (marker-position (car (last mark-ring))))))

  (global-set-key (kbd "M-[") 'my/mark-ring-backward)
  (global-set-key (kbd "M-]") 'my/mark-ring-forward)
  #+end_src
  
** Zotero integration
It's not uncommon that I'm working on a LaTeX manuscript or Python script, and need to quickly look up something in a paper stored in my Zotero library.  This function let's me do that from within emacs.

#+begin_src emacs-lisp
  (defun my/select-and-open-pdf ()
    "Select a PDF file from the Zotero storage directory and open it in pdf-view mode."
    (interactive)
    (let* ((pdf-files (f-entries "~/Zotero/storage"
				 (lambda (f) (equal "pdf" (f-ext f)))
				 t))
	   (selected-file (ivy-read "Select PDF: " pdf-files)))
      (when selected-file
	(find-file-other-window selected-file)
	(pdf-view-mode)
	(pdf-view-themed-minor-mode))))

  (global-set-key (kbd "C-c z") 'my/select-and-open-pdf)
#+end_src

** Kill word
#+begin_src emacs-lisp
 (defun my/C-w-dwim (&optional arg)
    "Kill either a region or the preceding word.
    This essentially merges the default keybindings of Emacs and Bash.
    With prefix arg N, delete backward to the start of the Nth word."
    (interactive "P")
    (cond ((use-region-p)
	   (kill-region (region-beginning) (region-end)))
	  (arg
	   (backward-kill-word (prefix-numeric-value arg)))
	  (t (backward-kill-word 1))))

  (global-set-key (kbd "C-w") 'my/C-w-dwim)
#+end_src

** Scratch note
#+begin_src emacs-lisp
  (defun my/scratch ()
    (interactive)
    (find-file (concat "~/Notes/Scratch/" (format-time-string "%Y%m%d%H%M%S.org"))))

  (global-set-key (kbd "C-c c") 'my/scratch)
#+end_src

* Future work
** Inbox
This is a mixture of stuff that was directly imported from my previous non-literate configuration file, and stuff that has been added later as "experimental" configuration.  Over time, I intend to gradually move stuff from here to other sections -- or remove them if no longer needed.

#+begin_src emacs-lisp
    (use-package adaptive-wrap
      :ensure t
      :hook
      ((visual-line-mode . adaptive-wrap-prefix-mode)))

    ;; Useful for customization/scripting.
    (use-package f
      :ensure t)

    ;; Automatically install and use tree-sitter.
    ;; (use-package treesit-auto
    ;;   :config
    ;;   (setq treesit-auto-install 'prompt)
    ;;   (global-treesit-auto-mode))

    (use-package pdf-tools
      :ensure t)

    (use-package windmove
      :ensure nil
      :config
      (windmove-mode 1))

    (use-package outline
      :hook
      ((python-ts-mode . outline-minor-mode)
       (LaTeX-mode . outline-minor-mode)))

    (use-package multi-vterm
      :ensure t)

  (define-prefix-command 'my-leader-map)
  (global-set-key (kbd "C-SPC") 'my-leader-map)
  (keymap-set evil-motion-state-map "SPC" 'my-leader-map)
  (keymap-set evil-normal-state-map "SPC" 'my-leader-map)

  (evil-define-key nil my-leader-map
      ;; add your bindings here:
      "SPC" 'switch-to-buffer
      "B"  'project-switch-to-buffer
      "pf" 'project-find-file
      "ps" 'project-shell-command
      "s"  'save-buffer
      ;; etc.
      )
#+end_src

** Wishlist
This is a list of things that I want to implement in my config at some point, when I get time and energy for it.

- Make =C-a= and =C-e= jump to the beginning of the actual line (not the visual line) if it is already at the beginning of the visual line.  This would mimick the behavior of Sublime Text when pressing =Cmd-Left= and =Cmd-Right= repeatedly, and makes it much easier to work with files with line wrapping.

# Local Variables: 
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle) (load-file user-init-file)) nil t)
# End:
