#+title: Emacs configuration
#+author: Jabir Ali Ouassou
#+PROPERTY: header-args:emacs-lisp :tangle "init.el"

This is my personal configuration file for Emacs. This configuration assumes that I'm using Emacs v30+ on MacOS. It is formatted as an Org-mode "literate configuration file", which means that each Emacs Lisp block below is autoexported to an =init.el= file when the file is saved.

* Basics
** Package management
#+begin_src emacs-lisp
  (use-package use-package
    :custom
    (native-comp-async-report-warnings-errors nil)
    (package-native-compile t)
    (use-package-always-demand t)
    :config
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
#+end_src
  
** Recent history
Emacs should remember where I've been.
#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

Emacs should remember what I've done.
#+begin_src emacs-lisp
  (savehist-mode 1)
#+end_src

** Keyboard support
I mostly use Emacs on MacOS. I don't really need the Super key as an Evil user, but I do need an easily accessible Meta key (for e.g. =M-RET= in Org-mode) and I do need the Option key (to type in Norwegian).
#+begin_src emacs-lisp
  (setopt mac-command-modifier 'meta)
  (setopt mac-option-modifier 'option)
#+end_src

I regularly switch between ISO and ANSI style keyboards, which can be quite annoying since the backtick and tilde symbols move around (and I use both a lot). Let's fix that.
#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "§") (kbd "`"))
  (define-key key-translation-map (kbd "±") (kbd "~"))
#+end_src

Some Meta keybindings don't work by default in the terminal (in e.g. Org-mode). Let's fix that as well.
#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "M-<return>") (kbd "M-RET"))
  (define-key key-translation-map (kbd "M-<backspace>") (kbd "M-DEL"))
#+end_src

Sometimes, I need to type literal UTF-8 characters. We can do this using the =C-\= keybinding, but it's nice to not be re-prompted for the input method every time we restart Emacs and re-invoke this feature.
#+begin_src emacs-lisp
  (setq default-input-method 'TeX)
  (setq default-transient-input-method 'TeX)
#+end_src

Finally, this package is specifically meant for the Kitty terminal. It ensures that e.g. super keybindings "just work" in the terminal, which evens the score a bit between the GUI and TUI versions of Emacs.
#+begin_src emacs-lisp
  (use-package kkp
    :ensure t
    :custom
    (kkp-super-modifier 'meta)
    :config
    (global-kkp-mode +1))
#+end_src

** Mouse support
Most things related to mouse support "just works" when Emacs is running as a GUI. The main thing I miss is smooth scrolling, especially when reading code using a Touchpad or Apple Mouse. This fixes that.
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
#+end_src

Some more work is needed to get the mouse working nicely in a terminal.
#+begin_src emacs-lisp
  (setopt mouse-wheel-follow-mouse t)
  (setopt mouse-wheel-progressive-speed nil)
  (mouse-wheel-mode 1)
  (xterm-mouse-mode 1)
#+end_src  
  
Finally, both in the GUI and in the terminal, it can be quite annoying when the mouse randomly highlights things. Usually this happens by accident since I use the keyboard more. Let's disable that.
#+begin_src emacs-lisp
  (setopt mouse-highlight nil)
#+end_src

** Frame parameters
#+begin_src emacs-lisp
  (set-frame-parameter nil 'internal-border-width 8)
#+end_src

** Sane defaults
Let's now configure some core Emacs features.
#+begin_src emacs-lisp
  (use-package emacs
    :hook
    (prog-mode . hs-minor-mode)
    :custom
    (auto-save-default nil)
    (dired-listing-switches "-hlLgG --group-directories-first --time-style=long-iso")
    (fringes-outside-margins t)
    (inhibit-startup-message t)
    (initial-major-mode 'org-mode)
    (initial-scratch-message "")
    (line-spacing 0.15)
    (make-backup-files nil)
    (ring-bell-function 'ignore)
    (sentence-end-double-space nil)
    (frame-title-format '("%b "
                          (:eval (let ((project (project-current))
                                       (remote (file-remote-p default-directory 'host)))
                                   (if remote
                                       (format "(%s)" (downcase remote))
                                     (if project
                                         (format "(%s)" (downcase (project-name project)))))))))
    (tab-width 4)
    (truncate-lines t)
    (use-short-answers t)
    (xterm-set-window-title t)
    :custom-face
    (default ((t (:family "JetBrains Mono NL" :height 140))))
    :bind
    ("C-\\" . activate-transient-input-method)
    ("<f5>" . sort-lines)
    :config
    ;; Don't indicate long or wrapped lines.
    (set-display-table-slot standard-display-table 'truncation ? )
    (set-display-table-slot standard-display-table 'wrap ? )
    ;; Turn on some useful default modes.
    (global-auto-revert-mode 1)
    ;; Disable the annoying default modes.
    (blink-cursor-mode -1)
    (menu-bar-mode -1)
    (when (display-graphic-p)
      (fringe-mode 1)
      (tooltip-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))
#+end_src

Run Emacs as a server. I chose to run it over TCP, because this lets me SSH forward the server to remote hosts. When I'm in a remote shell, I can then easily phone home via =emacsclient= to spawn new Tramp connections.
#+begin_src emacs-lisp
  (use-package server
    :custom
    (server-use-tcp t)
    (server-port 1337)
    :config
    (server-mode 1))
#+end_src

On macOS, there are often issues related to =$PATH= when starting Emacs as a GUI program. This package helps us alleviate that.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :vc (:url "https://github.com/purcell/exec-path-from-shell" :rev "main")
    :config
    (exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package treesit-auto
  ;;   :ensure t
  ;;   :custom
  ;;   (treesit-auto-install 'prompt)
  ;;   :config
  ;;   (treesit-auto-add-to-auto-mode-alist 'all)
  ;;   (global-treesit-auto-mode))
#+end_src

* Vim keybindings
First of all, let's enable the "Evil mode". As someone with a Vim background, this is more ergonomic for both my brain and my hands.
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :custom
    (evil-undo-system 'undo-redo)
    (evil-want-C-i-jump nil)
    (evil-want-C-u-scroll t)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

Note that Ex mode can be a bit dangerous in Emacs. I've burned myself several times by running commands like e.g. ":e!" and getting a different behavior from Vim, which in some cases can destroy data. Anyway, Ex mode in Emacs is not as powerful as in Vim, whereas the natural Emacs analogue would be M-x instead. Let's therefore remap colon to M-x.
#+begin_src emacs-lisp
  (evil-define-key* 'motion 'global ":" #'execute-extended-command)
#+end_src

Evil Collection is exactly what is sounds like: It makes Evil work in nearly every corner of Emacs.
#+begin_src emacs-lisp
    (use-package evil-collection
      :ensure t
      :after evil
      :config
      (evil-collection-init))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after (evil org)
    :hook (org-mode . evil-org-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-org-agenda
    :after evil-org
    :config (evil-org-agenda-set-keys))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-terminal-cursor-changer
    :ensure t
    :after evil
    :config
    (evil-terminal-cursor-changer-activate))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-tex
    :ensure t
    :hook
    (LaTeX-mode . evil-tex-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :after evil
    :config
    (general-evil-setup t)
    (general-override-mode 1)
    (general-create-definer gmap
      :keymaps 'override
      :states '(motion normal visual)
      :prefix "SPC")
    (general-create-definer lmap
      :keymaps 'override
      :states '(motion normal visual)
      :prefix ","))
#+end_src

* Functions
#+begin_src emacs-lisp
  (defun jabirali/science-definition-lookup ()
    "Look up a scientific definition using a ChatGPT wrapper."
    (interactive)
    (let* ((query (buffer-substring (region-beginning) (region-end)))
           (encoded-query (url-encode-url query))
           (search-url "https://chat.openai.com/g/g-Kihf3Sccx-science-definitions?q="))
      (browse-url (concat search-url encoded-query))))

  (bind-key "<f12>" #'jabirali/science-definition-lookup)
#+end_src

#+begin_src emacs-lisp
    (defun +org-find-file ()
      "Open one of my Org files (or create a new one)."
      (interactive)
      (let ((default-directory org-directory))
        (find-file (completing-read "Org: " (directory-files "." nil "\\.org$")))))
#+end_src

#+begin_src emacs-lisp
  (defun +eglot-project-ensure ()
    "Enable Eglot iff the current buffer belongs to a project."
    (if (project-current) (eglot-ensure)))
#+end_src

#+begin_src emacs-lisp
  (defun +theme-override (&rest _)
	"Override the current theme for a consistent and minimal look."
	(let ((bg0 (face-attribute 'default :background))
		  (bg1 (face-attribute 'mode-line :background))
		  (bg2 (face-attribute 'mode-line :background))
		  (fg0 (face-attribute 'default :foreground))
		  (fg1 (face-attribute 'mode-line :foreground))
		  (fg2 (face-attribute 'mode-line-inactive :foreground)))
	  (set-face-attribute 'tab-bar nil :foreground bg2 :background bg2 :box `(:line-width 6 :color ,bg2))
	  (set-face-attribute 'tab-bar-tab nil :foreground fg1 :background bg2 :box `(:line-width 6 :color ,bg2))
	  (set-face-attribute 'tab-bar-tab-inactive nil :foreground fg2 :background bg2 :box `(:line-width 6 :color ,bg2))
	  (set-face-attribute 'mode-line nil :background bg1 :box `(:line-width 6 :color ,bg1))
	  (set-face-attribute 'mode-line-inactive nil :background bg1 :box `(:line-width 6 :color ,bg1))
	  (set-face-attribute 'fringe nil :foreground bg0 :background bg0)
	  (set-face-attribute 'scroll-bar nil :foreground bg2 :background bg2)
	  (set-face-attribute 'vertical-border nil :foreground bg1 :background bg1)))

  (advice-add 'load-theme :after #'+theme-override)
#+end_src

#+begin_src emacs-lisp
  ;; (use-package spacious-padding
  ;;   :ensure t
  ;;   :config
  ;;   (spacious-padding-mode 1))
#+end_src

#+begin_src emacs-lisp
  (defun +url-handler-zotero (link)
    "Open a zotero:// link in the Zotero desktop app."
    (start-process "zotero_open" nil "open" (concat "zotero:" link)))
#+end_src

* Interface
* Coding
** Language servers
Eglot has been built into Emacs since v29. I've tried the alternatives Lsp-mode and Lsp-bridge, but so far Eglot is the solution that has been most "plug and play" and least buggy. It also seems to just work over Tramp connections if you install LSP servers remotely.
#+begin_src emacs-lisp
  (use-package eglot
    :custom
    (eldoc-echo-area-prefer-doc-buffer t)
    (eldoc-echo-area-use-multiline-p nil)
    :hook
    (python-mode . +eglot-project-ensure)
    :bind
    ("<f2>" . eglot-rename))
#+end_src

Eglot-Booster can help speed up Eglot by using an intermediary process between Eglot and each LSP server. The cost is that it doesn't work well over Tramp, and that it requires installation of an extra binary tool locally. But if Eglot is slow, this really helps.
#+begin_src emacs-lisp
  ;; (use-package eglot-booster
  ;;   :vc (:url "https://github.com/jdtsmith/eglot-booster.git" :rev "main")
  ;;   :after eglot
  ;;   :config (eglot-booster-mode))
#+end_src
   
** Formatters
#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :hook
    (eglot-managed-mode . format-all-mode)
    :config
    (setq-default format-all-formatters
                  '(("Python" (isort) (ruff) (black)))))
#+end_src

** Python code
Note: This doesn't currently play well with Tramp. If you have IPython installed locally, and try to run =C-c C-p= while editing a remote Python buffer, it might fail to start IPython remotely.
#+begin_src emacs-lisp
  (use-package python
    :config
    (when (executable-find "ipython")
      (setq-local python-shell-interpreter "ipython")
      (setq-local python-shell-prompt-detect-failure-warning nil)))
#+end_src

Ruff is a nice Python linter. Let's integrate it into Flymake.
#+begin_src emacs-lisp
  (use-package flymake-ruff
    :ensure t
    :hook (eglot-managed-mode . flymake-ruff-load))
#+end_src

* Writing
** Org documents
One of the main reasons I'm using Emacs at all. If it wasn't for Org, I'd probably still be using Vim as my main editor.
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-adapt-indentation nil)
    (org-agenda-files (list org-directory))
    (org-agenda-window-setup 'only-window)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-span 'day)
    (org-agenda-start-on-weekday nil)
    (org-archive-location "::* Archive")
    (org-babel-results-keyword "results")
    (org-confirm-babel-evaluate nil)
    (org-ctrl-k-protect-subtree t)
    (org-directory "~/Sync/Org")
    (org-fontify-quote-and-verse-blocks t)
    (org-highlight-latex-and-related '(native latex script entities))
    (org-image-actual-width '(400))
    (org-pretty-entities t)
    (org-pretty-entities-include-sub-superscripts nil)
    (org-return-follows-link t)
    (org-startup-folded 'fold)
    (org-startup-indented t)
    (org-tags-column -65)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
       (sequence "WAIT(w)" "HOLD(h)" "IDEA(*)" "|" "NOTE(-)" "STOP(s)")))
    :config
    (setopt org-latex-src-block-backend 'engraved)
    (setopt org-latex-engraved-theme 'ef-melissa-light)
    (setopt org-latex-packages-alist '(("" "microtype" t)))
    (setopt org-latex-hyperref-template "
  \\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},
   pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true}\n")
    (org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
    (org-link-set-parameters "zotero" :follow #'+url-handler-zotero))
#+end_src

Let's me drag-and-drop images into Org-mode.
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :after org
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "assets")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d%H%M%S")
    :config
    (defun +org-download-file-format (filename)
      "Purely date-based naming of attachments."
      (concat
       (format-time-string org-download-timestamp)
       "."
       (file-name-extension filename)))
    (setq org-download-file-format-function #'+org-download-file-format)
    (setq org-download-annotate-function (lambda (_link) ""))
    (org-download-enable)
    :bind (:map org-mode-map
                ("M-V" . org-download-clipboard))) 
#+end_src

Org Agenda needs some sectioning when it gets too long.
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :custom
    (org-super-agenda-groups '((:auto-parent t)))
    :config
    (setq org-super-agenda-header-map (make-sparse-keymap))
    (org-super-agenda-mode 1)) 
#+end_src

Use your Org Agenda as your screensaver. Because I can't remember to actively look at it when I'm busy, but that's when I really should.
#+begin_src emacs-lisp
  (use-package idle-org-agenda
    :ensure t
    :after org-agenda
    :custom
    (idle-org-agenda-interval 3600)
    :config
    (idle-org-agenda-mode 1))
#+end_src

Org Export to every format via Pandoc. I especially appreciate that I can generate DOCX files with LaTeX-based equations.
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure t) 
#+end_src

** LaTeX documents
First, let's install AUCTeX and set it up to sync with Skim.
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :custom
    (font-latex-fontify-script nil)
    (TeX-auto-save t)
    (TeX-source-correlate-method 'synctex)
    (TeX-source-correlate-mode t)
    (TeX-source-correlate-start-server t)
    (TeX-view-program-list '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
    (TeX-view-program-selection '((output-pdf "Skim")))) 
#+end_src

This is one of the main reasons I love writing LaTeX in Emacs. It's very ergonomic and intuitive after you get used to it, and it works very well in both Org-mode and TeX-mode.
#+begin_src emacs-lisp
  (use-package cdlatex
    :ensure t
    :hook
    ((TeX-mode . turn-on-cdlatex)
     (org-mode . turn-on-org-cdlatex)))
#+end_src

I'll eventually learn how to use this properly. Let's keep it around for now.
#+begin_src emacs-lisp
  (use-package reftex
    :ensure t
    :after tex
    :custom
    (reftex-cite-format 'bibtex)
    (reftex-enable-partial-scans t)
    (reftex-plug-into-AUCTeX t)
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t)
    :hook
    (TeX-mode . turn-on-reftex)) 
#+end_src

** MarkDown documents
The Lingua Franca of modern mark-up languages.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :hook
    (markdown-mode . cdlatex-mode)) 
#+end_src

** Spell checking
Flyspell is a built-in spellchecker in Emacs. By default, it uses Hunspell on MacOS (i.e. the same backend as Firefox and LibreOffice), and searches for dictionaries in =~/Library/Spelling/=. Remember to download the dictionaries you need to that folder...

Make Emacs use Hunspell even if Aspell or Ispell is accidentally installed. Moreover, combine a Norwegian and US English dictionary, since I tend to mix the two quite liberally in my notes and lectures.
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setopt ispell-program-name "hunspell")
    (setopt ispell-personal-dictionary (concat user-emacs-directory "ispell"))
    (setopt ispell-dictionary "en_US,nb_NO")
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US,nb_NO"))
#+end_src

#+begin_src emacs-lisp
  (use-package flyspell
    :hook
    ((text-mode . flyspell-mode)
     (prog-mode . flyspell-prog-mode)))
#+end_src

The default Flyspell interface and keybinding =C-c $= is not very ergonomic to use. Especially if you often have to add your own words to the personal dictionary. I'd rather use something based on =completing-read=, such that I can use e.g. Vertico for the correction interface.
#+begin_src emacs-lisp
  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src

** Text wrapping
I don't like the behavior 
#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :ensure t
    :hook
    (text-mode . visual-line-mode)
    (markdown-mode . adaptive-wrap-prefix-mode)
    (latex-mode . adaptive-wrap-prefix-mode))
#+end_src

* Internal packages
#+begin_src emacs-lisp
  (use-package tab-bar
    :custom
    (tab-bar-close-button-show nil)
    (tab-bar-format '(tab-bar-format-tabs))
    (tab-bar-new-tab-choice "*scratch*")
    (tab-bar-separator "  ")
    (tab-bar-show 1)
    (tab-bar-tab-hints t)
    :bind
    ("s-[" . tab-bar-history-back)
    ("s-]" . tab-bar-history-forward)
    :config
    (tab-bar-mode 1)
    (tab-bar-history-mode 1))
#+end_src

* External packages
#+begin_src emacs-lisp
  (use-package persistent-scratch
    :after (org evil)
    :ensure t
    :config
    (persistent-scratch-autosave-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (defun +other-window-dwim ()
      "Select either the minibuffer or an arbitrary visible window."
      (interactive)
      (if (active-minibuffer-window)
          (select-window (active-minibuffer-window))
        (call-interactively #'ace-window)))
    :bind
    ("M-o" . +other-window-dwim))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :ensure t
  ;;   :after eglot
  ;;   :hook (eglot-managed-mode . company-mode))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package corfu
  ;;   :ensure t
  ;;   :hook (prog-mode . corfu-mode)
  ;;   ;; :custom
  ;;   ;; (corfu-cycle t)
  ;;   ;; (corfu-auto t)
  ;;   ;; (corfu-auto-delay 0.1)
  ;;   ;; (corfu-quit-at-boundary t)
  ;;   ;; (corfu-quit-no-match t)
  ;;   :config
  ;;   (define-key corfu-map (kbd "C-n") 'corfu-next)
  ;;   (define-key corfu-map (kbd "C-p") 'corfu-previous))
#+end_src

#+begin_src emacs-lisp
  (use-package copilot
    :vc (:url "https://github.com/copilot-emacs/copilot.el" :rev "main")
    :custom
    (copilot-idle-delay 1)
    :hook
    (prog-mode . copilot-mode)
    :bind
    (:map copilot-mode-map
          ("M-RET" . copilot-accept-completion)
          ("M-n"   . copilot-next-completion)
          ("M-p"   . copilot-previous-completion)))
#+end_src

#+begin_src emacs-lisp
  (use-package diredfl
    :ensure t
    :after dired
    :config
    (diredfl-global-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-bar-width 0.1)
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-buffer-modification-icon nil)
    (doom-modeline-icon nil)
    (doom-modeline-modal nil)
    (doom-modeline-position-line-format nil)
    (doom-modeline-time nil)
    (doom-modeline-workspace-name nil)
    :config
    (doom-modeline-mode 1))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package doom-themes				;
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'doom-molokai t))
#+end_src

#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :config
    (load-theme 'ef-melissa-light t))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package kaolin-themes
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'kaolin-light t))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package spacemacs-theme
  ;;   :ensure t
  ;;   :custom
  ;;   (spacemacs-theme-org-height nil)
  ;;   :config
  ;;   (load-theme 'spacemacs-light t))
#+end_src

#+begin_src emacs-lisp
  (use-package expand-region
    :bind*
    ("C-c RET" . er/expand-region)
    :ensure t)
#+end_src


#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure t)
#+end_src 

#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :hook
    (prog-mode . hl-todo-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package iedit
    :ensure t) 
#+end_src


#+begin_src emacs-lisp
  (use-package julia-mode
    :ensure t) 
#+end_src


#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (:map magit-status-mode-map ("SPC" . nil))
    :custom
    (magit-diff-refine-hunk 'all)
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (add-to-list 'project-switch-commands '(magit-project-status "Magit") t)
    (keymap-set project-prefix-map "m" #'magit-project-status)) 
#+end_src


#+begin_src emacs-lisp
  ;; (use-package matlab
  ;;   :ensure matlab-mode) 
#+end_src


#+begin_src emacs-lisp
  ;; (use-package openwith
  ;;   :ensure t
  ;;   :config
  ;;   (setq openwith-associations
  ;;         '(("\\.\\(png\\|jpg\\|svg\\)$" "qlmanage -p" (file))
  ;;           ("\\.\\(pdf\\|docx\\|xlsx\\|pptx\\)$" "open" (file))))
  ;;   (openwith-mode 1)) 
#+end_src


#+begin_src emacs-lisp
  ;; (use-package orderless
  ;;   :ensure t
  ;;   :custom
  ;;   (completion-styles '(orderless basic))
  ;;   (completion-category-overrides '((file (styles basic partial-completion))))) 
#+end_src



#+begin_src emacs-lisp
  (use-package outshine
    :ensure t
    :hook
    (prog-mode . outshine-mode)) 
#+end_src





#+begin_src emacs-lisp
  (use-package prescient
    :ensure t) 
#+end_src



#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper)) 
#+end_src


#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode 1)
    (vertico-mouse-mode 1)) 
#+end_src


#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :bind (:map vertico-map
                ("RET"   . vertico-directory-enter)
                ("DEL"   . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) 
#+end_src


#+begin_src emacs-lisp
  (use-package vertico-prescient
    :ensure t
    :after (vertico prescient)
    :config
    (vertico-prescient-mode 1)) 
#+end_src


#+begin_src emacs-lisp
  ;; (use-package vertico-posframe
  ;;   :ensure t
  ;;   :after vertico
  ;;   :custom
  ;;   (vertico-posframe-poshandler 'posframe-poshandler-frame-top-center)
  ;;   (vertico-posframe-width 70)
  ;;   (vertico-posframe-border-width 2)
  ;;   :config
  ;;   (vertico-posframe-mode 1)) 
#+end_src


#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1)) 
#+end_src


#+begin_src emacs-lisp
  (use-package xclip
    :ensure t
    :config
    (xclip-mode 1)) 
#+end_src


#+begin_src emacs-lisp
  ;; (use-package xenops
  ;;   :ensure t
  ;;   :custom
  ;;   (xenops-image-width 350)
  ;;   :hook
  ;;   (org-mode . xenops-mode)
  ;;   (LaTeX-mode . xenops-mode)) 
#+end_src


#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)) 
#+end_src

* Global keybindings
#+begin_src emacs-lisp
  (mmap                                           ; Motion map
    "^" 'dired-jump) 
#+end_src


#+begin_src emacs-lisp
  (vmap                                           ; Visual map
    "ii" 'er/expand-region) 
#+end_src


#+begin_src emacs-lisp
  (gmap                                           ; Space menu
    "SPC" '(execute-extended-command :which-key "cmd")
    "1" '(tab-bar-select-tab :which-key "1")
    "2" '(tab-bar-select-tab :which-key "2")
    "3" '(tab-bar-select-tab :which-key "3")
    "4" '(tab-bar-select-tab :which-key "4")
    "5" '(tab-bar-select-tab :which-key "5")
    "6" '(tab-bar-select-tab :which-key "6")
    "7" '(tab-bar-select-tab :which-key "7")
    "8" '(tab-bar-select-tab :which-key "8")
    "9" '(tab-bar-select-tab :which-key "9")
    "a" '(org-agenda :which-key "agenda")
    "b" '(switch-to-buffer :which-key "buffer")
    "d" '(dired-jump :which-key "dired")
    "f" '(find-file :which-key "file")
    "g" '(magit :which-key "git")
    "h" `(,help-map :which-key "help")
    "i" '(imenu :which-key "imenu")
    "j" '(bookmark-jump :which-key "jump")
    "k" '(kill-this-buffer :which-key "kill")
    "n" `(,narrow-map :which-key "narrow")
    "o" '(ace-window :which-key "other")
    "p" `(,project-prefix-map :which-key "project")
    "q" '(delete-window :which-key "quit window")
    "Q" '(tab-close :which-key "quit tab")
    "r" '(recentf :which-key "recent")
    "s" '(save-buffer :which-key "save")
    "t" '(tab-bar-new-tab :which-key "tab")
    "w" `(,evil-window-map :which-key "window")
    "y" '(clone-indirect-buffer-other-window :which-key "indirect")) 
#+end_src


#+begin_src emacs-lisp
  (lmap                                           ; Major modes
    "," (general-key "C-c C-c")
    "a" (general-key "C-c C-a")
    "b" (general-key "C-c C-b")
    "c" (general-key "C-c C-c")
    "d" (general-key "C-c C-d")
    "e" (general-key "C-c C-e")
    "f" (general-key "C-c C-f")
    "g" (general-key "C-c C-g")
    "h" (general-key "C-c C-h")
    "i" (general-key "C-c C-i")
    "j" (general-key "C-c C-j")
    "k" (general-key "C-c C-k")
    "l" (general-key "C-c C-l")
    "m" (general-key "C-c C-m")
    "n" (general-key "C-c C-n")
    "o" (general-key "C-c C-o")
    "p" (general-key "C-c C-p")
    "q" (general-key "C-c C-q")
    "r" (general-key "C-c C-r")
    "s" (general-key "C-c C-s")
    "t" (general-key "C-c C-t")
    "u" (general-key "C-c C-u")
    "v" (general-key "C-c C-v")
    "w" (general-key "C-c C-w")
    "x" (general-key "C-c C-x")
    "y" (general-key "C-c C-y")
    "z" (general-key "C-c C-z")) 
#+end_src

#+begin_src emacs-lisp
  (lmap                                           ; Minor modes
    "!"  (general-key "C-c !" )
    "\"" (general-key "C-c \"")
    "#"  (general-key "C-c #" )
    "$"  (general-key "C-c $" )
    "%"  (general-key "C-c %" )
    "&"  (general-key "C-c &" )
    "'"  (general-key "C-c '" )
    "("  (general-key "C-c (" )
    ")"  (general-key "C-c )" )
    "*"  (general-key "C-c *" )
    "+"  (general-key "C-c +" )
    "-"  (general-key "C-c -" )
    "."  (general-key "C-c ." )
    "/"  (general-key "C-c /" )
    ":"  (general-key "C-c :" )
    ";"  (general-key "C-c ;" )
    "<"  (general-key "C-c <" )
    "="  (general-key "C-c =" )
    ">"  (general-key "C-c >" )
    "?"  (general-key "C-c ?" )
    "@"  (general-key "C-c @" )
    "["  (general-key "C-c [" )
    "\\" (general-key "C-c \\")
    "]"  (general-key "C-c ]" )
    "^"  (general-key "C-c ^" )
    "_"  (general-key "C-c _" )
    "`"  (general-key "C-c `" )
    "{"  (general-key "C-c {" )
    "|"  (general-key "C-c |" )
    "}"  (general-key "C-c }" )
    "~"  (general-key "C-c ~" ))
#+end_src

* Early init
** Custom file
By default, Emacs litters my =init.el= with its =customize= cache. That's annoying for several reasons:
1. If I'm writing my =init.el= by hand, having autogenerated code appended makes it messy;
2. If I'm autogenerating my =init.el= from an Org file, I'll continuously lose that cache;
                                                                               3. When =init.el= is in a Git repo, it's easy to accidentally sync host-specific settings.
                                                                               Luckily, this part is not so difficult to fix:
                                                                               #+begin_src emacs-lisp :tangle "early-init.el"
                                                                                 (setq custom-file (concat user-emacs-directory "custom.el"))
                                                                                 (ignore-errors (load custom-file))
                                                                               #+end_src

** Frame settings
Let's give our windows a bit of breathing room. Looks less stressful.
#+begin_src emacs-lisp :tangle "early-init.el"
  (setq-default left-margin-width 2 right-margin-width 2)
#+end_src

** Performance boost
These settings seem to make Emacs a bit snappier. But I haven't really benchmarked them, so it could be placebo.
#+begin_src emacs-lisp :tangle "early-init.el"
  (setq gc-cons-threshold (* 128 1024 1024)
        read-process-output-max (* 1024 1024))
#+end_src

* Tangle
#+begin_src conf
  Local Variables:
  eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
  End:
#+end_src
  
