# ------------------------------------------------------------
# General settings
# ------------------------------------------------------------

# Choose a modifier. This is part of other keybindings, and is
# also used if you want to move or resize windows with a mouse.
set $mod Mod4
floating_modifier $mod normal

# Start applications. I use the standard Sway keybindings to open
# terminals and an application menu, respectively, but customize
# what commands are used for those in the main Sway `config` file.
bindsym $mod+Return exec $term
bindsym $mod+d      exec $menu

# Kill applications.
bindsym $mod+Shift+q kill

# Reload config.
bindsym $mod+Shift+c reload


# ------------------------------------------------------------
# Container management
# ------------------------------------------------------------
# One `container` in Sway can either refer to a single visible
# window, or to a collection of containers. For instance, one
# `tabbed` container can contain multiple `split` containers,
# where each of those in turn correspond to one application.
#
# Most of these are the same as the Sway defaults. My changes
# are mainly to adjust the `splitv` and `splith` keybindings
# to be more similar to Vim `split` and `vsplit`, and to add
# `$mod+z` as a counterpart to the default binding `$mod+a`.
# ------------------------------------------------------------

# Container focus.
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

bindsym $mod+Left  focus left
bindsym $mod+Down  focus down
bindsym $mod+Up    focus up
bindsym $mod+Right focus right

bindsym $mod+a     focus parent
bindsym $mod+z     focus child
bindsym $mod+space focus mode_toggle

# Container movement.
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

bindsym $mod+Shift+Left  move left
bindsym $mod+Shift+Down  move down
bindsym $mod+Shift+Up    move up
bindsym $mod+Shift+Right move right

bindsym $mod+Shift+space floating toggle

# Container layout.
bindsym $mod+e layout toggle split
bindsym $mod+w layout tabbed
bindsym $mod+f fullscreen
bindsym $mod+s splitv
bindsym $mod+v splith


# ------------------------------------------------------------
# Workspace management
# ------------------------------------------------------------
# These keybindings are mostly similar to the Sway defaults.
# My main change is implementing a keybinding `$mod+n` for
# renaming the current workspace, making it easier to mark
# on-the-fly which workspaces you are using for which tasks.
# This required some adjustment of all other keybindings to
# work, since the keybinding definitions below should then
# refer to workspace *numbers* instead of workspace *names*.
# ------------------------------------------------------------

# Rename workspace. The number of the current workspace is
# automatically prepended to the entered name to prevent
# the keybindings for workspace navigation from breaking.
bindsym $mod+n exec echo "" | $dmenu | xargs -r swaymsg rename workspace to $(swaymsg -t get_workspaces | jq -r '.[] | select(.focused)' | jq -r '.num')

# Switch to workspace. The `number` lets us use the same
# keybindings after renames (via the keybinding `$mod+n`).
bindsym $mod+1     workspace number  1
bindsym $mod+2     workspace number  2
bindsym $mod+3     workspace number  3
bindsym $mod+4     workspace number  4
bindsym $mod+5     workspace number  5
bindsym $mod+6     workspace number  6
bindsym $mod+7     workspace number  7
bindsym $mod+8     workspace number  8
bindsym $mod+9     workspace number  9
bindsym $mod+0     workspace number 10
bindsym $mod+minus scratchpad show

# Move to workspace. Again, we use `workspace number` here.
bindsym $mod+Shift+1     move container to workspace number  1
bindsym $mod+Shift+2     move container to workspace number  2
bindsym $mod+Shift+3     move container to workspace number  3
bindsym $mod+Shift+4     move container to workspace number  4
bindsym $mod+Shift+5     move container to workspace number  5
bindsym $mod+Shift+6     move container to workspace number  6
bindsym $mod+Shift+7     move container to workspace number  7
bindsym $mod+Shift+8     move container to workspace number  8
bindsym $mod+Shift+9     move container to workspace number  9
bindsym $mod+Shift+0     move container to workspace number 10
bindsym $mod+Shift+minus move scratchpad


# ------------------------------------------------------------
# Control keys
# ------------------------------------------------------------
# These keybindings are not offered by Sway by default, though
# many other desktop environments provide similar keybindings.
# Most of these bindings have additional system dependencies.
#
# Note the argument `--locked`, which enables these keybindings
# even when the screen is locked. This lets you e.g. mute your
# Spotify or skip a song without having to type a password.
# ------------------------------------------------------------

# Multimedia keys.
bindsym --locked XF86AudioRaiseVolume  exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym --locked XF86AudioLowerVolume  exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym --locked XF86AudioMute         exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym --locked XF86AudioMicMute      exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
bindsym --locked XF86MonBrightnessDown exec brightnessctl set  2%
bindsym --locked XF86MonBrightnessUp   exec brightnessctl set +5%
bindsym --locked XF86AudioPlay         exec playerctl play-pause
bindsym --locked XF86AudioNext         exec playerctl next
bindsym --locked XF86AudioPrev         exec playerctl previous


# ------------------------------------------------------------
# Special modes
# ------------------------------------------------------------
# Like e.g. Vim, Sway is a modal program. It lets you define
# custom modes where keys have different meanings than in the
# `default` mode, which is useful as a quick way to implement
# keyboard-driven menus for things like logging out.
#
# many other desktop environments provide similar keybindings.
# Most of these bindings have additional system dependencies.
#
# Note the argument `--locked`, which enables these keybindings
# even when the screen is locked. This lets you e.g. mute your
# Spotify or skip a song without having to type a password.
# ------------------------------------------------------------

# System menu. This serves as a convenient "log out" menu,
# which lets you choose to e.g. reboot or lock the screen.
set $mode_system System: (e) exit, (l) lock, (s) suspend, (r) reboot, (S) shutdown, (R) UEFI mode
mode "$mode_system" {
    bindsym e       exit
    bindsym l       exec swaylock -f -c 000000, mode "default"
    bindsym s       exec --no-startup-id systemctl suspend, mode "default"
    bindsym r       exec --no-startup-id systemctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode "default"
    bindsym Shift+r exec --no-startup-id systemctl reboot --firmware-setup, mode "default"

    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+Shift+e mode "$mode_system"

# System settings. This menu is used for things
# like choosing a WiFi network or VPN server.
set $mode_settings Settings: (n) net, (v) vpn
mode "$mode_settings" {
    bindsym n exec $fzf ~/.config/bin/fzf-nm
    bindsym v exec $fzf vpn

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+Shift+s mode "$mode_settings"
