#+TITLE: Doom config
#+AUTHOR: Jabir Ali Ouassou
#+PROPERTY: header-args :tangle yes

* Introduction
** Literate config
This is a literate configuration file for [[https://github.com/hlissner/doom-emacs][Doom Emacs]]. It is an Org document,
permitting easy navigation via folding and commenting via rich markup. As
long as your =init.el= contains the =:config literate= module, it will be
automatically tangled to a =config.el= by Doom Emacs and loaded at startup.

* General configuration
** Header line
Turn on lexical binding, which is required for the Doom configuration file.
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src elisp

** User information
This is relevant for GPG config, mail clients, snippets, templates, etc.
#+begin_src elisp
(setq user-full-name "Jabir Ali Ouassou"
      user-mail-address "jabirali@switzerlandmail.ch")
#+end_src elisp

** System paths
#+begin_src elisp
(setq org-directory "~/iCloud/Org/")
#+end_src elisp

* User interface
** Font settings
#+begin_src elisp
(setq doom-font "Menlo-13"
      doom-variable-pitch-font "Menlo-13")
#+end_src elisp

** Colorscheme
#+begin_src elisp
(setq doom-theme 'doom-one)
#+end_src elisp

** Line numbers
Turn on line numbers.
#+begin_src elisp
(setq display-line-numbers-type t)
#+end_src

* TODO
#+begin_src elisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
