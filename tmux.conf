# ~/.tmux.conf vim: foldmethod=marker

# Basic settings {{{
	# Shell.
	set -g default-shell /bin/bash
	set -g default-command /usr/bin/fish

	# Modern terminal.
	set -g mouse on
	set -g set-clipboard on
	set -ga terminal-overrides ',xterm-256color:RGB'

	# Count from 1.
	set  -g base-index 1
	setw -g pane-base-index 1

	# List of visual commands. These are treated specially, in the sense
	# that escape is passed through instead of activating tmux copy mode.
	set -g @visuals '(n?vim?|g?h?top|aerc|spt)'
# }}}
# Aesthetics {{{
	# Powerline tabs.
	set -g @tab_0l '#[fg=#fdf6e3,bg=#363636]'
	set -g @tab_0r '#[bg=default,fg=#363636]'
	set -g @tab_1l '#[bg=default,fg=#363636]#[bg=#363636,fg=#fdf6e3]'
	set -g @tab_1r '#[bg=default,fg=#363636]'
	set -g @tab_2l '#[bg=default,fg=#fdf6e3]#[bg=#fdf6e3,fg=#1d1d1d]'
	set -g @tab_2r '#[bg=default,fg=#fdf6e3]'

	# Statusline (general).
	set -g status-position top
	set -g status-justify left
	set-option -g status-style "bg=#1d1d1d"

	# Statusline (left).
	set -g status-left " "

	# Statusline (right).
	set -g status-right-length 24
	set -g status-right '#{@tab_0l} #H#{?#{==:#S,0},,: #S} #{@tab_0r}'

	# Statusline (center).
	setw -g window-status-separator ''
	set -g window-status-format "#{@tab_1l} #I #{?#{==:#{pane_current_path},$HOME},#W,#{b:pane_current_path}} #{@tab_1r}"
	set -g window-status-current-format "#{@tab_2l} #I #{?#{==:#{pane_current_path},$HOME},#W,#{b:pane_current_path}} #{@tab_2r}"

	# Pane borders.
	set -g pane-border-style 'fg=#1d1d1d,bg=#fdf6e3' 
	set -g pane-active-border-style 'fg=#1d1d1d,bg=#fdf6e3'

	# Pane contents.
	set -g window-style 'fg=#657b83,bg=#fdf6e3'
	set -g window-active-style 'fg=#657b83,bg=#fdf6e3'
# }}}
# Keybindings {{{
	# Prefix key.
	unbind-key 'C-b'
	set -g prefix 'M-space'
	bind-key 'M-space' send-prefix

	# Global commands.
	bind -n 'M-\;' command-prompt
	bind -n 'M-:'  command-prompt
	bind -n 'M-r' source-file ~/.tmux.conf \; display " Reloaded config"

	# Inspired by Firefox.
	bind -n 'C-t' new-window
	bind -n 'C-w' kill-window
	bind -n 'C-q' detach-client
	bind -n 'C-PgUp' previous-window
	bind -n 'C-PgDn' next-window
	bind -n 'C-S-PgUp' swap-window -t -1
	bind -n 'C-S-PgDn' swap-window -t +1

	# Inspired by i3.
	bind -n 'M-1' if-shell 'tmux select-window -t :1'  '' 'new-window -t  :1'
	bind -n 'M-2' if-shell 'tmux select-window -t :2'  '' 'new-window -t  :2'
	bind -n 'M-3' if-shell 'tmux select-window -t :3'  '' 'new-window -t  :3'
	bind -n 'M-4' if-shell 'tmux select-window -t :4'  '' 'new-window -t  :4'
	bind -n 'M-5' if-shell 'tmux select-window -t :5'  '' 'new-window -t  :5'
	bind -n 'M-6' if-shell 'tmux select-window -t :6'  '' 'new-window -t  :6'
	bind -n 'M-7' if-shell 'tmux select-window -t :7'  '' 'new-window -t  :7'
	bind -n 'M-8' if-shell 'tmux select-window -t :8'  '' 'new-window -t  :8'
	bind -n 'M-9' if-shell 'tmux select-window -t :9'  '' 'new-window -t  :9'
	bind -n 'M-0' if-shell 'tmux select-window -t :10' '' 'new-window -t :10'

	bind -n 'M-!' if-shell 'tmux join-pane -t :1'  'select-layout -E' 'break-pane -t :1'
	bind -n 'M-@' if-shell 'tmux join-pane -t :2'  'select-layout -E' 'break-pane -t :2'
	bind -n 'M-#' if-shell 'tmux join-pane -t :3'  'select-layout -E' 'break-pane -t :3'
	bind -n 'M-$' if-shell 'tmux join-pane -t :4'  'select-layout -E' 'break-pane -t :4'
	bind -n 'M-%' if-shell 'tmux join-pane -t :5'  'select-layout -E' 'break-pane -t :5'
	bind -n 'M-^' if-shell 'tmux join-pane -t :6'  'select-layout -E' 'break-pane -t :6'
	bind -n 'M-&' if-shell 'tmux join-pane -t :7'  'select-layout -E' 'break-pane -t :7'
	bind -n 'M-*' if-shell 'tmux join-pane -t :8'  'select-layout -E' 'break-pane -t :8'
	bind -n 'M-(' if-shell 'tmux join-pane -t :9'  'select-layout -E' 'break-pane -t :9'
	bind -n 'M-)' if-shell 'tmux join-pane -t :10' 'select-layout -E' 'break-pane -t :10'

	# Window management.
	is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

	bind -n 'M-h' if-shell "$is_vim" 'send M-h' 'select-pane -L'
	bind -n 'M-j' if-shell "$is_vim" 'send M-j' 'select-pane -D'
	bind -n 'M-k' if-shell "$is_vim" 'send M-k' 'select-pane -U'
	bind -n 'M-l' if-shell "$is_vim" 'send M-l' 'select-pane -R'

	bind-key -n 'M-H' if-shell "tmux swap-pane -s '{left-of}'"
	bind-key -n 'M-J' if-shell "tmux swap-pane -s '{down-of}'"
	bind-key -n 'M-K' if-shell "tmux swap-pane -s '{up-of}'"
	bind-key -n 'M-L' if-shell "tmux swap-pane -s '{right-of}'"

	bind -T copy-mode-vi 'M-h' select-pane -L
	bind -T copy-mode-vi 'M-j' select-pane -D
	bind -T copy-mode-vi 'M-k' select-pane -U
	bind -T copy-mode-vi 'M-l' select-pane -R

	# bind -n 'M-H' split-window -bh -c "#{pane_current_path}"\; select-layout -E
	# bind -n 'M-J' split-window -v  -c "#{pane_current_path}"\; select-layout -E
	# bind -n 'M-K' split-window -bv -c "#{pane_current_path}"\; select-layout -E
	# bind -n 'M-L' split-window -h  -c "#{pane_current_path}"\; select-layout -E
	# bind -n 'M-Q' kill-pane\; select-layout -E

	# Vim-like copy/paste mappings.
	set-window-option -g mode-keys vi
	bind -n 'M-y' copy-mode
	bind -n 'M-p' run "tmux set-buffer \"$(wl-paste)\"; tmux paste-buffer"

	bind -T copy-mode-vi 'y'   send -X copy-selection-and-cancel
	bind -T copy-mode-vi 'v'   send -X begin-selection
	bind -T copy-mode-vi 'V'   send -X select-line
	bind -T copy-mode-vi 'C-v' send -X rectangle-toggle
	bind -T copy-mode-vi 'i'   send -X cancel
	bind -T copy-mode-vi 'a'   send -X cancel
	bind -T copy-mode-vi '['   send -X start-of-line\; send -X search-backward "❯"
	bind -T copy-mode-vi ']'   send -X end-of-line\;   send -X search-forward  "❯"

	# Pressing escape also activates Tmux copy mode, unless we're in a 
	# visual program where this does not make sense (e.g. nvim and htop).
	# This is then similar to activating normal mode in Vim-like programs.
	is_visual="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?#{@visuals}$'"
 	bind -n 'Escape' if-shell "$is_visual" 'send-keys Escape' 'copy-mode' 
# }}}
# Plugins {{{
	# List of plugins.
	set -g @plugin 'tmux-plugins/tmux-sensible'
	set -g @plugin 'tmux-plugins/tmux-resurrect'
	set -g @plugin 'tmux-plugins/tmux-continuum'

	# Plugin settings.
	set -g @continuum-restore 'on'

	# Install plugin manager.
	if "test ! -d ~/.tmux/plugins/tpm" \
	   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

	# Initialize plugin manager.
	run -b "~/.tmux/plugins/tpm/tpm"
# }}}
